"""
Module de mod√©lisation stochastique du risque selon modelisation.pdf Section 2.4
Impl√©mente le framework ARMA-GARCH + KDE + R-Vine Copulas pour l'estimation CVaR
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

# Importations pour la mod√©lisation stochastique
from arch import arch_model
from sklearn.neighbors import KernelDensity
from copulas.multivariate import VineCopula
import scipy.stats as stats

from config import Config

class StochasticRiskModeling:
    """
    Framework de mod√©lisation stochastique du risque complet:
    1. Mod√®les ARMA-GARCH pour la volatilit√© conditionnelle (√âquation 13)
    2. Estimation KDE des distributions marginales (√âquation 15) 
    3. Copules R-Vine pour la structure de d√©pendance
    4. Simulation Monte Carlo pour l'estimation CVaR
    """
    
    def __init__(self, n_scenarios: int = 10000):
        # Param√®tres de simulation
        self.n_scenarios = n_scenarios
        
        # Stockage des mod√®les
        self.arma_garch_models = {}
        self.kde_estimators = {}
        self.vine_copula = None
        
        # Donn√©es pour la mod√©lisation
        self.returns_data = None
        self.standardized_returns = None
        self.assets = []
        
        # Configuration ARMA-GARCH
        self.arma_order = (1, 1)    # ARMA(1,1) par d√©faut
        self.garch_order = (1, 1)   # GARCH(1,1) par d√©faut
        self.kde_bandwidth = 0.1    # Bandwidth KDE par d√©faut
        
        print("üìä Framework de mod√©lisation stochastique initialis√©")
    
    def fit_models(self, returns_data: pd.DataFrame, min_observations: int = 252) -> bool:
        """
        Ajuste tous les mod√®les sur les donn√©es de rendements
        
        Args:
            returns_data: DataFrame avec rendements (colonnes = actifs, index = dates)
            min_observations: Nombre minimum d'observations requises
            
        Returns:
            True si l'ajustement r√©ussit, False sinon
        """
        
        if len(returns_data) < min_observations:
            print(f"‚ö†Ô∏è Pas assez d'observations: {len(returns_data)} < {min_observations}")
            return False
        
        # Nettoyer les donn√©es
        self.returns_data = returns_data.dropna()
        self.assets = list(self.returns_data.columns)
        
        print(f"üìà Ajustement des mod√®les sur {len(self.returns_data)} observations pour {len(self.assets)} actifs")
        
        # √âtape 1: Ajuster les mod√®les ARMA-GARCH
        success_garch = self._fit_arma_garch_models()
        if not success_garch:
            print("‚ùå √âchec de l'ajustement ARMA-GARCH")
            return False
        
        # √âtape 2: Standardiser les rendements
        self._standardize_returns()
        
        # √âtape 3: Ajuster les distributions marginales KDE
        success_kde = self._fit_kde_marginals()
        if not success_kde:
            print("‚ùå √âchec de l'ajustement KDE")
            return False
        
        # √âtape 4: Ajuster la copule R-Vine
        success_copula = self._fit_vine_copula()
        if not success_copula:
            print("‚ùå √âchec de l'ajustement copule R-Vine")
            return False
        
        print("‚úÖ Tous les mod√®les ajust√©s avec succ√®s")
        return True
    
    def _fit_arma_garch_models(self) -> bool:
        """
        Ajuste les mod√®les ARMA-GARCH selon l'√âquation (13):
        r_i_t = mu_i_t + sigma_i_t * epsilon_i_t
        """
        
        print("  Ajustement des mod√®les ARMA-GARCH...")
        
        for asset in self.assets:
            try:
                returns_series = self.returns_data[asset] * 100  # Conversion en pourcentage
                
                # Cr√©er le mod√®le ARMA-GARCH
                model = arch_model(
                    returns_series,
                    mean='ARX',          # Mod√®le ARMA pour la moyenne
                    vol='GARCH',         # Mod√®le GARCH pour la volatilit√©
                    p=self.arma_order[0], # Ordre AR
                    q=self.arma_order[1], # Ordre MA  
                    rescale=False
                )
                
                # Ajuster le mod√®le
                fitted_model = model.fit(disp='off', show_warning=False)
                
                # Stocker le mod√®le ajust√©
                self.arma_garch_models[asset] = fitted_model
                
                print(f"    ‚úÖ {asset}: ARMA({self.arma_order[0]},{self.arma_order[1]})-GARCH({self.garch_order[0]},{self.garch_order[1]})")
                
            except Exception as e:
                print(f"    ‚ùå {asset}: Erreur ARMA-GARCH - {e}")
                return False
        
        return True
    
    def _standardize_returns(self):
        """
        Standardise les rendements selon l'√âquation (14):
        standardized_returns = (r_i_t - mu_i_t) / sigma_i_t
        """
        
        print("  Standardisation des rendements...")
        
        standardized_data = {}
        
        for asset in self.assets:
            if asset not in self.arma_garch_models:
                continue
                
            fitted_model = self.arma_garch_models[asset]
            
            # Extraire les r√©sidus standardis√©s du mod√®le GARCH
            standardized_residuals = fitted_model.resid / fitted_model.conditional_volatility
            
            # Stocker les r√©sidus standardis√©s
            standardized_data[asset] = standardized_residuals.values
        
        # Cr√©er DataFrame des rendements standardis√©s
        self.standardized_returns = pd.DataFrame(standardized_data)
        self.standardized_returns = self.standardized_returns.dropna()
        
        print(f"    ‚úÖ {len(self.standardized_returns)} observations standardis√©es")
    
    def _fit_kde_marginals(self) -> bool:
        """
        Ajuste les distributions marginales avec KDE selon l'√âquation (15)
        """
        
        print("  Ajustement des distributions marginales KDE...")
        
        if self.standardized_returns is None:
            return False
        
        for asset in self.assets:
            try:
                if asset not in self.standardized_returns.columns:
                    continue
                    
                standardized_series = np.array(self.standardized_returns[asset]).reshape(-1, 1)
                
                # Ajuster le KDE
                kde = KernelDensity(
                    kernel='gaussian',
                    bandwidth=self.kde_bandwidth
                )
                kde.fit(standardized_series)
                
                # Stocker l'estimateur KDE
                self.kde_estimators[asset] = kde
                
                print(f"    ‚úÖ {asset}: KDE avec bandwidth={self.kde_bandwidth}")
                
            except Exception as e:
                print(f"    ‚ùå {asset}: Erreur KDE - {e}")
                return False
        
        return True
    
    def _fit_vine_copula(self) -> bool:
        """
        Ajuste la copule R-Vine pour capturer la structure de d√©pendance
        """
        
        print("  Ajustement de la copule R-Vine...")
        
        try:
            # Convertir les rendements standardis√©s en rangs uniformes
            uniform_data = self._to_uniform_margins()
            
            if uniform_data is None or len(uniform_data.columns) < 2:
                print("    ‚ùå Donn√©es insuffisantes pour la copule")
                return False
            
            # Ajuster la copule Vine
            self.vine_copula = VineCopula()
            self.vine_copula.fit(uniform_data)
            
            print(f"    ‚úÖ Copule R-Vine ajust√©e sur {len(uniform_data)} observations")
            return True
            
        except Exception as e:
            print(f"    ‚ùå Erreur copule R-Vine: {e}")
            
            # Fallback: utiliser une copule Gaussienne simple
            try:
                print("    üîÑ Tentative avec copule Gaussienne...")
                
                if self.standardized_returns is not None:
                    # Cr√©er une corr√©lation simple comme fallback
                    correlation_matrix = np.corrcoef(self.standardized_returns.T)
                    self.vine_copula = {
                        'type': 'gaussian_fallback',
                        'correlation': correlation_matrix
                    }
                    
                    print("    ‚úÖ Copule Gaussienne ajust√©e (fallback)")
                    return True
                else:
                    print("    ‚ùå Donn√©es standardis√©es manquantes")
                    return False
                
            except Exception as e2:
                print(f"    ‚ùå √âchec copule Gaussienne: {e2}")
                return False
    
    def _to_uniform_margins(self) -> Optional[pd.DataFrame]:
        """
        Convertit les rendements standardis√©s en marges uniformes [0,1]
        """
        
        if self.standardized_returns is None:
            return None
        
        uniform_data = {}
        
        for asset in self.standardized_returns.columns:
            # Calculer les rangs empiriques et convertir en [0,1]
            ranks = stats.rankdata(self.standardized_returns[asset])
            uniform_values = ranks / (len(ranks) + 1)  # √âviter 0 et 1 exacts
            uniform_data[asset] = uniform_values
        
        return pd.DataFrame(uniform_data)
    
    def simulate_scenarios(self, n_scenarios: Optional[int] = None) -> Optional[np.ndarray]:
        """
        G√©n√®re des sc√©narios Monte Carlo pour l'estimation CVaR
        
        Args:
            n_scenarios: Nombre de sc√©narios √† g√©n√©rer
            
        Returns:
            Matrice des rendements simul√©s (n_scenarios x n_assets)
        """
        
        n_scenarios = n_scenarios or self.n_scenarios
        
        if not self._models_ready():
            print("‚ùå Mod√®les non ajust√©s - impossible de simuler")
            return None
        
        try:
            print(f"üé≤ G√©n√©ration de {n_scenarios} sc√©narios Monte Carlo...")
            
            # 1. G√©n√©ration bas√©e sur le type de copule
            if isinstance(self.vine_copula, dict) and self.vine_copula.get('type') == 'gaussian_fallback':
                # Fallback: utiliser la corr√©lation Gaussienne
                correlation = self.vine_copula['correlation']
                copula_samples = np.random.multivariate_normal(
                    mean=np.zeros(len(self.assets)),
                    cov=correlation,
                    size=n_scenarios
                )
            elif hasattr(self.vine_copula, 'sample'):
                # Utiliser la vraie copule Vine
                copula_samples = self.vine_copula.sample(n_scenarios)
                if isinstance(copula_samples, pd.DataFrame):
                    copula_samples = copula_samples.values
            else:
                # Fallback simple: √©chantillons ind√©pendants
                copula_samples = np.random.randn(n_scenarios, len(self.assets))
            
            # 2. Transformer en rendements via les marginales
            simulated_returns = np.zeros((n_scenarios, len(self.assets)))
            
            for i, asset in enumerate(self.assets):
                if self.standardized_returns is not None and asset in self.standardized_returns.columns:
                    # Utiliser les quantiles empiriques des donn√©es standardis√©es
                    asset_data = np.array(self.standardized_returns[asset])
                    
                    if isinstance(self.vine_copula, dict):
                        # Pour le fallback Gaussien, utiliser directement les valeurs
                        simulated_returns[:, i] = copula_samples[:, i]
                    else:
                        # Pour les vraies copules, transformer via quantiles
                        uniform_values = copula_samples[:, i]
                        quantiles = np.quantile(asset_data, uniform_values)
                        simulated_returns[:, i] = quantiles
            
            print(f"    ‚úÖ {n_scenarios} sc√©narios g√©n√©r√©s")
            return simulated_returns
            
        except Exception as e:
            print(f"‚ùå Erreur simulation: {e}")
            return None
    
    def calculate_portfolio_cvar(self, 
                               weights: np.ndarray, 
                               confidence_level: float = 0.05,
                               n_scenarios: Optional[int] = None) -> float:
        """
        Calcule la CVaR du portefeuille via simulation Monte Carlo
        
        Args:
            weights: Poids du portefeuille
            confidence_level: Niveau de confiance (5% par d√©faut)
            n_scenarios: Nombre de sc√©narios pour simulation
            
        Returns:
            CVaR estim√©e
        """
        
        # G√©n√©rer les sc√©narios
        scenarios = self.simulate_scenarios(n_scenarios)
        if scenarios is None:
            return 0.0
        
        # Calculer les rendements de portefeuille
        portfolio_returns = np.dot(scenarios, weights)
        
        # Calculer la VaR (quantile)
        var = np.quantile(portfolio_returns, confidence_level)
        
        # Calculer la CVaR (esp√©rance conditionnelle)
        cvar_returns = portfolio_returns[portfolio_returns <= var]
        
        if len(cvar_returns) == 0:
            return 0.0
        
        cvar = np.mean(cvar_returns)
        
        return -cvar  # Retourner la valeur positive (perte)
    
    def _models_ready(self) -> bool:
        """V√©rifie si tous les mod√®les sont pr√™ts"""
        return (
            len(self.arma_garch_models) > 0 and
            len(self.kde_estimators) > 0 and
            self.vine_copula is not None and
            self.standardized_returns is not None
        )
    
    def get_model_summary(self) -> Dict:
        """Retourne un r√©sum√© des mod√®les ajust√©s"""
        return {
            'n_assets': len(self.assets),
            'n_observations': len(self.returns_data) if self.returns_data is not None else 0,
            'arma_garch_fitted': len(self.arma_garch_models),
            'kde_fitted': len(self.kde_estimators),
            'copula_fitted': self.vine_copula is not None,
            'ready_for_simulation': self._models_ready()
        }


def test_stochastic_risk_modeling():
    """Test du framework de mod√©lisation stochastique"""
    print("üß™ Test du framework de mod√©lisation stochastique...")
    
    # G√©n√©rer des donn√©es de test
    np.random.seed(42)
    n_obs = 500
    n_assets = 3
    
    # Simulation de rendements corr√©l√©s
    returns_data = pd.DataFrame(
        np.random.multivariate_normal(
            mean=[0.001, 0.001, 0.001],
            cov=[[0.0004, 0.0001, 0.0002],
                 [0.0001, 0.0009, 0.0001], 
                 [0.0002, 0.0001, 0.0016]],
            size=n_obs
        ),
        columns=['Asset1', 'Asset2', 'Asset3']
    )
    
    # Tester le framework
    risk_model = StochasticRiskModeling(n_scenarios=1000)
    
    # Ajuster les mod√®les
    success = risk_model.fit_models(returns_data)
    
    if success:
        # Calculer CVaR pour un portefeuille √©quipond√©r√©
        weights = np.array([1/3, 1/3, 1/3])
        cvar = risk_model.calculate_portfolio_cvar(weights, confidence_level=0.05)
        
        print(f"‚úÖ CVaR du portefeuille √©quipond√©r√©: {cvar:.4f}")
        
        # R√©sum√© des mod√®les
        summary = risk_model.get_model_summary()
        print(f"‚úÖ R√©sum√©: {summary}")
        
    else:
        print("‚ùå √âchec des tests")


if __name__ == "__main__":
    test_stochastic_risk_modeling()